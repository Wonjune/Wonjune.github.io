I"Q)<p>클라우드 연구회의 목적은 사무실 회의 예약 서비스를 만들고 이를 도커 이미지로 생성한 후에 AWS에서 쿠버네티스 클러스터를 구성하고, 고가용성과 안정성이 보장되는 서비스로 구축하는 것이다. 현재는 AWS에서 K8S 클러스터 환경이 만들어질 네트워크 구조를 설계하고 구성하는 작업을 수행하고 있다. 퍼블릭으로 오픈되는 마스터 1대와 프라이빗의 워커 2대로 구성되는 쿠버네티스 클러스터, 여기에 도커 개발용 인스턴스까지 추가하는 과정에서 배운 것들을 바탕으로 여기서는 가장 기초적인 형태를 만드는 내용만 정리해본다.</p>

<p>우선 전체적인 네트워크의 구성도는 아래와 같다.</p>

<p><img src="/assets/images/2022-07-17/Untitled.png" alt="Untitled" /></p>

<h2 id="vpc-생성">VPC 생성</h2>

<p>VPC(Virtual Private Cloud)는 AWS 클라우드에서 생성되는 모든 리소스가 올라가는 바탕이 되는 가상 네트워크 공간이다. 특정 단일 리전에 종속되지만 이 리전 내의 여러 가용영역에 걸쳐서 존재할 수 있다. 최소 16비트의 사이더블록을 가진 CIDR 주소를 가진다.</p>

<p>가격이 저렴하다는 이유로 오레곤 리전을 선택했는데, 실제 서비스 시에 서울 리전에 비해서 속도 이슈가 있을지는 지켜봐야 할 것 같다. 10.0.0.0/16 주소를 할당하자.</p>

<p><img src="/assets/images/2022-07-17/Untitled%201.png" alt="Untitled" /></p>

<h2 id="퍼블릭-서브넷-생성">퍼블릭 서브넷 생성</h2>

<p>서브넷은 VPC 아래에 존재하는 논리적인 서브 네트워크이다. 최소 24비트 블록을 가지는 CIDR 주소를 가진다. VPC 가 속한 리전의 특정 가용영역(AZ)에 종속된다. 외부에서 서브넷 내부로 엑세스가 가능한가에 따라 퍼블릭 서브넷과 프라이빗 서브넷으로 분류할 수 있다.</p>

<p>퍼블릭 서브넷은 라우팅 테이블에 외부 인터넷과 연결되는 인터넷 게이트웨이 연결주소가 라우트되며 구성요소(EC2 등)는 퍼블릭IP 주소(혹은 탄력적IP 주소)가 할당되어 외부에서 접속이 가능하다.</p>

<p>VPC ID는 위에서 생성한 VPC 로 지정해주고 CIDR 주소는 10.0.0.0/24 로 지정한다. 가용영역은 특별히 지정해주지 않으면 자동으로 할당되지만 어떤 것으로 할당되었는지는 기억해둔다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%202.png" alt="Untitled" /></p>

<h2 id="인터넷-게이트웨이-생성">인터넷 게이트웨이 생성</h2>

<p>생성한 서브넷이 퍼블릭 서브넷으로서 기능하려면 인터넷게이트웨이를 통해 외부로 오픈되어야 한다. 인터넷게이트웨이는 VPC에 종속된다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%203.png" alt="Untitled" /></p>

<p>게이트웨이를 생성한 후에 위에서 생성한 VPC에 연결해준다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%204.png" alt="Untitled" /></p>

<h2 id="라우팅-테이블-생성-및-연결">라우팅 테이블 생성 및 연결</h2>

<p>퍼블릭 서브넷에서 사용할 라우팅테이블을 생성하고 외부 인터넷으로 접속할 수 있도록 0.0.0.0/0 주소로 인터넷 게이트웨이를 라우팅한다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%205.png" alt="Untitled" /></p>

<p>라우팅테이블을 public subnet 에 연결</p>

<p><img src="/assets/images/2022-07-17/Untitled%206.png" alt="Untitled" /></p>

<p>외부인터넷 통신이 가능하도록 디폴트 스태틱 라우팅 추가하고 인터넷 게이트웨이를 연결</p>

<p><img src="/assets/images/2022-07-17/Untitled%207.png" alt="Untitled" /></p>

<h2 id="퍼블릭-ec2-생성">퍼블릭 EC2 생성</h2>

<p>퍼블릭 서브넷안에 EC2 인스턴스를 생성한다. 이 인스턴스가 이 후 생성될 네트워크 구성요소로 접근하기 위한 관문 역할을 수행할 것이다. VPC와 서브넷을 잘 지정해준다. ‘퍼블릭 IP 자동 할당’ 을 ‘활성화’로 해주면 퍼블릭 IP 가 할당되게 되는데, 외부로 서비스되기 위해서는 일관된 IP주소(기본으로 할당되는 퍼블릭IP는 인스턴스가 재시작되거나 하면 다른 주소로 바뀐다)를 가지는 것이 좋으므로 이후에 탄력적 IP(Elastic IP) 를 생성해서 할당할 예정이다. 따라서 여기서는 별도의 퍼블릭 IP는 할당받지 않도록 한다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%208.png" alt="Untitled" /></p>

<h2 id="탄력적-ip-생성-후-퍼블릭-ec2-에-연결">탄력적 IP 생성 후 퍼블릭 EC2 에 연결</h2>

<p>탄력적 IP(Elastic IP)를 생성 후에 퍼블릭 EC2 인스턴스에 연결해준다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%209.png" alt="Untitled" /></p>

<h2 id="접속테스트">접속테스트</h2>

<p>이제 생성한 인스턴스가 인터넷으로 잘 붙는지 확인해볼 차례이다. 우선 터미널로 SSH 접속을 한다. EC2 인스턴스 생성 시 디폴트 설정을 따랐다면 보안그룹에 22번 포트가 등록되어 있을 것이고 키페어를 할당 받았을 것이다.</p>

<p>미리 생성해둔 keypair 파일에 읽기/쓰기 권한을 추가하자.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>600 dxgo-k8s-mrs.pem
</code></pre></div></div>

<p>OpenSSH 를 이용하여 접속한다. 탄력적IP 주소로 붙으며 인스턴스 생성시 AMI를 우분투로 지정해서 디폴트 계정은 ubuntu 이다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-i</span> <span class="s2">"dxgo-k8s-mrs.pem"</span> ubuntu@52.34.103.119
</code></pre></div></div>

<p><img src="/assets/images/2022-07-17/Untitled%2010.png" alt="Untitled" /></p>

<p><a href="http://google.com">google.com</a> 으로 ping 을 날려보면 잘 접속되는 것을 알 수 있다. 인터넷 게이트웨이는 잘 설정되었다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2011.png" alt="Untitled" /></p>

<h2 id="프라이빗-서브넷-생성">프라이빗 서브넷 생성</h2>

<p>프라이빗 서브넷은 외부로부터 차단된 서브넷이다. 따라서 이 서브넷 내부의 인스턴스는 외부에서 접속할 수 없고 오직 같은 VPC 내에서만 접근이 가능하다. 다만 프라이빗 서브넷의 인스턴스는 동일 VPC 내의 퍼블릭 서브넷에 구성된 NAT(Network Address Translation) 게이트웨이를 이용하면 인터넷으로 접속이 가능해진다. 이렇게 해도 여전히 외부에서 프라이빗 서브넷 내부로는 접근 할 수 없다.(외부에서 접근 할 수 있는 오픈된 IP 주소가 없기 때문) 따라서 보안이 중요한 데이터베이스나 백엔드 서버는 프라이빗 서브넷 내부에 둔다.</p>

<p>서브넷의 생성은 퍼블릿 서브넷의 그것과 동일하게 수행한다. CIDR 주소는 10.0.1.0/24 로 지정한다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2012.png" alt="Untitled" /></p>

<h2 id="퍼블릭서브넷에-nat게이트웨이-추가">퍼블릭서브넷에 NAT게이트웨이 추가</h2>

<p>프라이빗 서브넷의 인스턴스도 필요한 라이브러리나 어플리케이션을 설치할 수 있도록 인터넷으로 접속할 수 있게 해야한다. 이를 위해 퍼블릭 서브넷에 NAT 게이트웨이를 만들어준다.</p>

<p>연결 유형을 퍼블릭으로 하고 탄력적 IP를 하나 할당 받는다. 이래야 프라이빗 서브넷의 인스턴스가 인터넷으로 접속할 수 있다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2013.png" alt="Untitled" /></p>

<p>VPC 내에 라우팅 테이블을 하나 생성하고, 프라이빗 서브넷을 연결해준다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2014.png" alt="Untitled" /></p>

<p>라우팅에 NAT 게이트웨이로의 디폴트 라우팅을 추가해준다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2015.png" alt="Untitled" /></p>

<h2 id="프라이빗-서브넷에-ec2-생성-후-테스트">프라이빗 서브넷에 EC2 생성 후 테스트</h2>

<p>프라이빗 서브넷 내부에도 퍼블릭 때와 동일하게 EC2를 생성해준다. ‘퍼블릭 IP 자동 할당’ 은 서브넷 설정에 따라 ‘비활성화’로 세팅되는 것을 알 수 있다. 프라이빗 서브넷 내부의 인스턴스는 외부 인터넷에 오픈되지 않으므로 퍼블릭IP 를 가지지 않는다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2016.png" alt="Untitled" /></p>

<p>프라이빗 서브넷은 외부에서 접속할 수 없다고 했으므로, 서브넷을 구축한 운영자도 SSH 를 통해 접속할 수 없다. 그럼 어떻게 해야할까? 위에서 프라이빗 서브넷의 인스턴스는 동일 VPC 내부에서만 접속 할 수 있다고 했다. 그리고 퍼블릭 EC2 인스턴스를 생성하면서 관문 역할을 수행할 것이라고도 했다. 즉, 퍼블릭 EC2 인스턴스를 통해서 접근을 해야한다.</p>

<p>퍼블릭 서브넷의 인스턴스로 프라이빗 서브넷의 인스턴스로 SSH 접속을 하기 위해  키페어파일을 업로드하자. 리눅스의 경우는 scp 명령으로 파일을 보낼 수 있는데, FTP를 이용해도 된다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2017.png" alt="Untitled" /></p>

<p>퍼블릭 EC2 로 SSH 접속 후에 다시 프라이빗 EC2 로 SSH 접속한다. 프라이빗 IP 주소로 접속하면 된다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2018.png" alt="Untitled" /></p>

<p>프라이빗서브넷의 EC2에서 외부 인터넷 접속이 되는지 ping 테스트를 수행한다. 이제 NAT 게이트웨이 설정도 잘 된 것을 알 수 있다.</p>

<p><img src="/assets/images/2022-07-17/Untitled%2019.png" alt="Untitled" /></p>

<h2 id="정리">정리</h2>

<p>여기까지가 아주 기본적인 VPC 네트워크 구성 형태이다. 여기서 고가용성을 위해 다른 가용영역에 퍼블릭 또는 프라이빗 서브넷을 추가로 생성할 수도 있다.(앞에서 가용영역을 잘 기억해놓으라는 것이 이런 이유) 이런 경우에 로드밸런서나 오토 스케일링이 추가되어 트래픽을 분산시킬 수 있다. 이러한 내용들은 나중에 다시 정리해보기로 하겠다.</p>
:ET